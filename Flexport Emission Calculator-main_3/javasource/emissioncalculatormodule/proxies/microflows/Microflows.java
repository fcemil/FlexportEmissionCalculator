// This file was generated by Mendix Studio Pro.
//
// WARNING: Code you write here will be lost the next time you deploy the project.

package emissioncalculatormodule.proxies.microflows;

import java.util.HashMap;
import java.util.Map;
import com.mendix.core.Core;
import com.mendix.core.CoreException;
import com.mendix.systemwideinterfaces.MendixRuntimeException;
import com.mendix.systemwideinterfaces.core.IContext;
import com.mendix.systemwideinterfaces.core.IMendixObject;

public class Microflows
{
	// These are the microflows for the EmissionCalculatorModule module
	public static void calculate_Emissions(IContext context, emissioncalculatormodule.proxies.Calculation _order_Information)
	{
		Map<java.lang.String, Object> params = new HashMap<>();
		params.put("Order_Information", _order_Information == null ? null : _order_Information.getMendixObject());
		Core.microflowCall("EmissionCalculatorModule.Calculate_Emissions").withParams(params).execute(context);
	}
	public static emissioncalculatormodule.proxies.GeoLocation getCoordinates_Destination(IContext context, java.lang.String _cityName)
	{
		Map<java.lang.String, Object> params = new HashMap<>();
		params.put("CityName", _cityName);
		IMendixObject result = (IMendixObject)Core.microflowCall("EmissionCalculatorModule.GetCoordinates_Destination").withParams(params).execute(context);
		return result == null ? null : emissioncalculatormodule.proxies.GeoLocation.initialize(context, result);
	}
	public static emissioncalculatormodule.proxies.GeoLocation getCoordinates_Origin(IContext context, java.lang.String _cityName)
	{
		Map<java.lang.String, Object> params = new HashMap<>();
		params.put("CityName", _cityName);
		IMendixObject result = (IMendixObject)Core.microflowCall("EmissionCalculatorModule.GetCoordinates_Origin").withParams(params).execute(context);
		return result == null ? null : emissioncalculatormodule.proxies.GeoLocation.initialize(context, result);
	}
	public static void loopFlowforAverageIntermodal(IContext context, emissioncalculatormodule.proxies.Company _company)
	{
		Map<java.lang.String, Object> params = new HashMap<>();
		params.put("Company", _company == null ? null : _company.getMendixObject());
		Core.microflowCall("EmissionCalculatorModule.LoopFlowforAverageIntermodal").withParams(params).execute(context);
	}
	public static void loopFlowforAverageTruck(IContext context, emissioncalculatormodule.proxies.Company _company)
	{
		Map<java.lang.String, Object> params = new HashMap<>();
		params.put("Company", _company == null ? null : _company.getMendixObject());
		Core.microflowCall("EmissionCalculatorModule.LoopFlowforAverageTruck").withParams(params).execute(context);
	}
	public static void popUpforIntermodalName(IContext context)
	{
		Map<java.lang.String, Object> params = new HashMap<>();
		Core.microflowCall("EmissionCalculatorModule.popUpforIntermodalName").withParams(params).execute(context);
	}
	public static void popUpforTruckName(IContext context)
	{
		Map<java.lang.String, Object> params = new HashMap<>();
		Core.microflowCall("EmissionCalculatorModule.popUpforTruckName").withParams(params).execute(context);
	}
}